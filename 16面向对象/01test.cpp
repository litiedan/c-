#include<iostream>
using namespace std;

// c++在执行程序的时候，将内存大致划分为4个区域

// 1.代码区，存放函数体的二进制代码，由操作系统进行管理
// 2.全局区，存放全局变量和静态变量和常量；
// 3.栈区，由编译器自动分配释放，存放函数的参数值，局部变量等
// 4.堆区，由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收

// 意义，不同区域存放的数据，赋予不同的生命周期，更能灵活编程

// 在程序编译后会生成exe可执行程序，在 执行该程序前 分为两个区域
//     代码区(存放cpu执行的机器指令-----二进制代码)
//                 特点：
//                 共享，对于频繁被执行的程序，只需在内存中有一份代码即可
//                 只读，防止程序意外修改它的指令
//     全局区(存放全局变量和静态变量和常量)
//                 特点：该区域的属于在程序结束后由操作系统释放


//执行程序后内存区域划分
            //  栈区：由编译器自动分配释放，存放函数的参数值，局部变量等。
                            //    栈区的数据由编译器管理开辟和释放
          //堆区：  在c++中  主要利用new在堆区开辟内存·



int  g_a = 10;
int  g_b = 10;
int main()
{   
    //只要是写在函数体(main函数也算)内的变量都叫局部变量
    
    //普通局部变量
    int  a = 10;
    int  b = 10;

    //静态变量 在普通变量前面加static 
    int  static  s_a = 10;
    int  static s_b = 10;
     //常量分为 字符串常量 和  const修饰常量
    cout<<"局部变量存放在栈区"<<endl;
    cout<<"局部变量a的地址"<<&a<<endl;
    cout<<"局部变量b的地址"<<&b<<endl;
    cout<<"全局变量和静态变量存放在全局区"<<endl;
    cout<<"全局变量g_a的地址"<<&g_a<<endl;
    cout<<"全局变量g_b的地址"<<&g_b<<endl;
    cout<<"静态变量s_a的地址"<<&s_a<<endl;
    cout<<"静态变量s_b的地址"<<&s_b<<endl;
    return 0;
}